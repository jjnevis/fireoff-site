/* Generated by Opal 0.11.4 */
Opal.modules["native"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $hash2 = Opal.hash2, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$is_a?', '$map', '$alias_method', '$to_a', '$_Array', '$include', '$method_missing', '$bind', '$instance_method', '$slice', '$-', '$length', '$[]=', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$_initialize', '$name', '$exiting_mid', '$native_module']);
  
  (function($base, $parent_nesting) {
    var $Native, self = $Native = $module($base, 'Native');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Native_is_a$q_1, TMP_Native_try_convert_2, TMP_Native_convert_3, TMP_Native_call_4, TMP_Native_proc_5, TMP_Native_included_19, TMP_Native_initialize_20, TMP_Native_to_n_21;

    
    Opal.defs(self, '$is_a?', TMP_Native_is_a$q_1 = function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    
    }, TMP_Native_is_a$q_1.$$arity = 2);
    Opal.defs(self, '$try_convert', TMP_Native_try_convert_2 = function $$try_convert(value, default$) {
      var self = this;

      if (default$ == null) {
        default$ = nil;
      }
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    
    }, TMP_Native_try_convert_2.$$arity = -2);
    Opal.defs(self, '$convert', TMP_Native_convert_3 = function $$convert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    
    }, TMP_Native_convert_3.$$arity = 1);
    Opal.defs(self, '$call', TMP_Native_call_4 = function $$call(obj, key, $a_rest) {
      var self = this, args, $iter = TMP_Native_call_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      if ($iter) TMP_Native_call_4.$$p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, l = args.length; i < l; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    
    }, TMP_Native_call_4.$$arity = -3);
    Opal.defs(self, '$proc', TMP_Native_proc_5 = function $$proc() {
      var TMP_6, self = this, $iter = TMP_Native_proc_5.$$p, block = $iter || nil;

      if ($iter) TMP_Native_proc_5.$$p = null;
      
      if ($truthy(block)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'LocalJumpError'), "no block given")
      };
      return $send(Opal.const_get_qualified('::', 'Kernel'), 'proc', [], (TMP_6 = function($a_rest){var self = TMP_6.$$s || this, args, TMP_7, instance = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        $send(args, 'map!', [], (TMP_7 = function(arg){var self = TMP_7.$$s || this;
if (arg == null) arg = nil;
        return self.$Native(arg)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6));
    }, TMP_Native_proc_5.$$arity = 0);
    (function($base, $parent_nesting) {
      var $Helpers, self = $Helpers = $module($base, 'Helpers');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Helpers_alias_native_11, TMP_Helpers_native_reader_14, TMP_Helpers_native_writer_17, TMP_Helpers_native_accessor_18;

      
      
      Opal.defn(self, '$alias_native', TMP_Helpers_alias_native_11 = function $$alias_native(new$, $old, $kwargs) {
        var TMP_8, TMP_9, TMP_10, self = this, $post_args, as, old;

        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        $kwargs = Opal.extract_kwargs($post_args);
        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        as = $kwargs.$$smap["as"];
        if (as == null) {
          as = nil
        }
        if (0 < $post_args.length) {
          old = $post_args.splice(0,1)[0];
        }
        if (old == null) {
          old = new$;
        }
        if ($truthy(old['$end_with?']("="))) {
          return $send(self, 'define_method', [new$], (TMP_8 = function(value){var self = TMP_8.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          
            self["native"][old['$[]']($range(0, -2, false))] = Opal.const_get_relative($nesting, 'Native').$convert(value);
            return value;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))
        } else if ($truthy(as)) {
          return $send(self, 'define_method', [new$], (TMP_9 = function($a_rest){var self = TMP_9.$$s || this, block, args, value = nil;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_9.$$p || nil;
            if (block) TMP_9.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          if ($truthy((value = $send(Opal.const_get_relative($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc())))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_9.$$s = self, TMP_9.$$arity = -1, TMP_9))
          } else {
          return $send(self, 'define_method', [new$], (TMP_10 = function($a_rest){var self = TMP_10.$$s || this, block, args;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_10.$$p || nil;
            if (block) TMP_10.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(Opal.const_get_relative($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc())}, TMP_10.$$s = self, TMP_10.$$arity = -1, TMP_10))
        }
      }, TMP_Helpers_alias_native_11.$$arity = -2);
      
      Opal.defn(self, '$native_reader', TMP_Helpers_native_reader_14 = function $$native_reader($a_rest) {
        var TMP_12, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(names, 'each', [], (TMP_12 = function(name){var self = TMP_12.$$s || this, TMP_13;
if (name == null) name = nil;
        return $send(self, 'define_method', [name], (TMP_13 = function(){var self = TMP_13.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12))
      }, TMP_Helpers_native_reader_14.$$arity = -1);
      
      Opal.defn(self, '$native_writer', TMP_Helpers_native_writer_17 = function $$native_writer($a_rest) {
        var TMP_15, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(names, 'each', [], (TMP_15 = function(name){var self = TMP_15.$$s || this, TMP_16;
if (name == null) name = nil;
        return $send(self, 'define_method', ["" + (name) + "="], (TMP_16 = function(value){var self = TMP_16.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15))
      }, TMP_Helpers_native_writer_17.$$arity = -1);
      
      Opal.defn(self, '$native_accessor', TMP_Helpers_native_accessor_18 = function $$native_accessor($a_rest) {
        var self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        $send(self, 'native_reader', Opal.to_a(names));
        return $send(self, 'native_writer', Opal.to_a(names));
      }, TMP_Helpers_native_accessor_18.$$arity = -1);
    })($nesting[0], $nesting);
    Opal.defs(self, '$included', TMP_Native_included_19 = function $$included(klass) {
      var self = this;

      return klass.$extend(Opal.const_get_relative($nesting, 'Helpers'))
    }, TMP_Native_included_19.$$arity = 1);
    
    Opal.defn(self, '$initialize', TMP_Native_initialize_20 = function $$initialize(native$) {
      var self = this;

      
      if ($truthy(Opal.const_get_qualified('::', 'Kernel')['$native?'](native$))) {
        } else {
        Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (native$.$inspect()) + " isn't native")
      };
      return (self["native"] = native$);
    }, TMP_Native_initialize_20.$$arity = 1);
    
    Opal.defn(self, '$to_n', TMP_Native_to_n_21 = function $$to_n() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"]
    }, TMP_Native_to_n_21.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_native$q_22, TMP_Kernel_Native_25, TMP_Kernel_Array_26;

    
    
    Opal.defn(self, '$native?', TMP_Kernel_native$q_22 = function(value) {
      var self = this;

      return value == null || !value.$$class
    }, TMP_Kernel_native$q_22.$$arity = 1);
    
    Opal.defn(self, '$Native', TMP_Kernel_Native_25 = function $$Native(obj) {
      var TMP_23, TMP_24, self = this;

      if ($truthy(obj == null)) {
        return nil
      } else if ($truthy(self['$native?'](obj))) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Object').$new(obj)
      } else if ($truthy(obj['$is_a?'](Opal.const_get_relative($nesting, 'Array')))) {
        return $send(obj, 'map', [], (TMP_23 = function(o){var self = TMP_23.$$s || this;
if (o == null) o = nil;
        return self.$Native(o)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23))
      } else if ($truthy(obj['$is_a?'](Opal.const_get_relative($nesting, 'Proc')))) {
        return $send(self, 'proc', [], (TMP_24 = function($a_rest){var self = TMP_24.$$s || this, block, args;

          block = TMP_24.$$p || nil;
          if (block) TMP_24.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return self.$Native($send(obj, 'call', Opal.to_a(args), block.$to_proc()))}, TMP_24.$$s = self, TMP_24.$$arity = -1, TMP_24))
        } else {
        return obj
      }
    }, TMP_Kernel_Native_25.$$arity = 1);
    self.$alias_method("_Array", "Array");
    
    Opal.defn(self, '$Array', TMP_Kernel_Array_26 = function $$Array(object, $a_rest) {
      var self = this, args, $iter = TMP_Kernel_Array_26.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_Array_26.$$p = null;
      
      if ($truthy(self['$native?'](object))) {
        return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array'), 'new', [object].concat(Opal.to_a(args)), block.$to_proc()).$to_a()};
      return self.$_Array(object);
    }, TMP_Kernel_Array_26.$$arity = -2);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_$eq$eq_27, TMP_Object_has_key$q_28, TMP_Object_each_29, TMP_Object_$$_30, TMP_Object_$$$eq_31, TMP_Object_merge$B_32, TMP_Object_respond_to$q_33, TMP_Object_respond_to_missing$q_34, TMP_Object_method_missing_35, TMP_Object_nil$q_36, TMP_Object_is_a$q_37, TMP_Object_instance_of$q_38, TMP_Object_class_39, TMP_Object_to_a_40, TMP_Object_inspect_41;

    def["native"] = nil;
    
    self.$include(Opal.const_get_qualified('::', 'Native'));
    
    Opal.defn(self, '$==', TMP_Object_$eq$eq_27 = function(other) {
      var self = this;

      return self["native"] === Opal.const_get_qualified('::', 'Native').$try_convert(other)
    }, TMP_Object_$eq$eq_27.$$arity = 1);
    
    Opal.defn(self, '$has_key?', TMP_Object_has_key$q_28 = function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name)
    }, TMP_Object_has_key$q_28.$$arity = 1);
    Opal.alias(self, "key?", "has_key?");
    Opal.alias(self, "include?", "has_key?");
    Opal.alias(self, "member?", "has_key?");
    
    Opal.defn(self, '$each', TMP_Object_each_29 = function $$each($a_rest) {
      var self = this, args, $iter = TMP_Object_each_29.$$p, $yield = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_each_29.$$p = null;
      if (($yield !== nil)) {
        
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
        } else {
        return $send(self, 'method_missing', ["each"].concat(Opal.to_a(args)))
      }
    }, TMP_Object_each_29.$$arity = -1);
    
    Opal.defn(self, '$[]', TMP_Object_$$_30 = function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return Opal.const_get_qualified('::', 'Native').$call(self["native"], key)
      }
    
    }, TMP_Object_$$_30.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Object_$$$eq_31 = function(key, value) {
      var self = this, native$ = nil;

      
      native$ = Opal.const_get_qualified('::', 'Native').$try_convert(value);
      if ($truthy(native$ === nil)) {
        return self["native"][key] = value
        } else {
        return self["native"][key] = native$
      };
    }, TMP_Object_$$$eq_31.$$arity = 2);
    
    Opal.defn(self, '$merge!', TMP_Object_merge$B_32 = function(other) {
      var self = this;

      
      
      other = Opal.const_get_qualified('::', 'Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, TMP_Object_merge$B_32.$$arity = 1);
    
    Opal.defn(self, '$respond_to?', TMP_Object_respond_to$q_33 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.const_get_qualified('::', 'Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all)
    }, TMP_Object_respond_to$q_33.$$arity = -2);
    
    Opal.defn(self, '$respond_to_missing?', TMP_Object_respond_to_missing$q_34 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.hasOwnProperty.call(self["native"], name)
    }, TMP_Object_respond_to_missing$q_34.$$arity = -2);
    
    Opal.defn(self, '$method_missing', TMP_Object_method_missing_35 = function $$method_missing(mid, $a_rest) {
      var self = this, args, $iter = TMP_Object_method_missing_35.$$p, block = $iter || nil, $writer = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_method_missing_35.$$p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return (($writer = [mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0)]), $send(self, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
      }
      else {
        return $send(Opal.const_get_qualified('::', 'Native'), 'call', [self["native"], mid].concat(Opal.to_a(args)), block.$to_proc());
      }
    
    }, TMP_Object_method_missing_35.$$arity = -2);
    
    Opal.defn(self, '$nil?', TMP_Object_nil$q_36 = function() {
      var self = this;

      return false
    }, TMP_Object_nil$q_36.$$arity = 0);
    
    Opal.defn(self, '$is_a?', TMP_Object_is_a$q_37 = function(klass) {
      var self = this;

      return Opal.is_a(self, klass)
    }, TMP_Object_is_a$q_37.$$arity = 1);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.defn(self, '$instance_of?', TMP_Object_instance_of$q_38 = function(klass) {
      var self = this;

      return self.$$class === klass
    }, TMP_Object_instance_of$q_38.$$arity = 1);
    
    Opal.defn(self, '$class', TMP_Object_class_39 = function() {
      var self = this;

      return self.$$class
    }, TMP_Object_class_39.$$arity = 0);
    
    Opal.defn(self, '$to_a', TMP_Object_to_a_40 = function $$to_a(options) {
      var self = this, $iter = TMP_Object_to_a_40.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($iter) TMP_Object_to_a_40.$$p = null;
      return $send(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Native'), 'Array'), 'new', [self["native"], options], block.$to_proc()).$to_a()
    }, TMP_Object_to_a_40.$$arity = -1);
    return (Opal.defn(self, '$inspect', TMP_Object_inspect_41 = function $$inspect() {
      var self = this;

      return "" + "#<Native:" + (String(self["native"])) + ">"
    }, TMP_Object_inspect_41.$$arity = 0), nil) && 'inspect';
  })(Opal.const_get_relative($nesting, 'Native'), Opal.const_get_relative($nesting, 'BasicObject'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_initialize_42, TMP_Array_each_43, TMP_Array_$$_44, TMP_Array_$$$eq_45, TMP_Array_last_46, TMP_Array_length_47, TMP_Array_inspect_48;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Native'));
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    
    Opal.defn(self, '$initialize', TMP_Array_initialize_42 = function $$initialize(native$, options) {
      var $a, self = this, $iter = TMP_Array_initialize_42.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($iter) TMP_Array_initialize_42.$$p = null;
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Array_initialize_42, false), [native$], null);
      self.get = ($truthy($a = options['$[]']("get")) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ($truthy($a = options['$[]']("set")) ? $a : options['$[]']("access"));
      self.length = ($truthy($a = options['$[]']("length")) ? $a : "length");
      self.block = block;
      if ($truthy(self.$length() == null)) {
        return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no length found on the array-like object")
        } else {
        return nil
      };
    }, TMP_Array_initialize_42.$$arity = -2);
    
    Opal.defn(self, '$each', TMP_Array_each_43 = function $$each() {
      var self = this, $iter = TMP_Array_each_43.$$p, block = $iter || nil;

      if ($iter) TMP_Array_each_43.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, TMP_Array_each_43.$$arity = 0);
    
    Opal.defn(self, '$[]', TMP_Array_$$_44 = function(index) {
      var self = this, result = nil, $case = nil;

      
      result = (function() {$case = index;
      if (Opal.const_get_relative($nesting, 'String')['$===']($case) || Opal.const_get_relative($nesting, 'Symbol')['$===']($case)) {if ($truthy(self.named)) {
        return self["native"][self.named](index)
        } else {
        return self["native"][index]
      }}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {if ($truthy(self.get)) {
        return self["native"][self.get](index)
        } else {
        return self["native"][index]
      }}
      else { return nil }})();
      if ($truthy(result)) {
        if ($truthy(self.block)) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    }, TMP_Array_$$_44.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Array_$$$eq_45 = function(index, value) {
      var self = this;

      if ($truthy(self.set)) {
        return self["native"][self.set](index, Opal.const_get_relative($nesting, 'Native').$convert(value))
        } else {
        return self["native"][index] = Opal.const_get_relative($nesting, 'Native').$convert(value)
      }
    }, TMP_Array_$$$eq_45.$$arity = 2);
    
    Opal.defn(self, '$last', TMP_Array_last_46 = function $$last(count) {
      var $a, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil;
      }
      if ($truthy(count)) {
        
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ($truthy($rb_ge(index, 0))) {
          
          result['$<<'](self['$[]'](index));
          index = $rb_minus(index, 1);
        };
        return result;
        } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      }
    }, TMP_Array_last_46.$$arity = -1);
    
    Opal.defn(self, '$length', TMP_Array_length_47 = function $$length() {
      var self = this;

      return self["native"][self.length]
    }, TMP_Array_length_47.$$arity = 0);
    Opal.alias(self, "to_ary", "to_a");
    return (Opal.defn(self, '$inspect', TMP_Array_inspect_48 = function $$inspect() {
      var self = this;

      return self.$to_a().$inspect()
    }, TMP_Array_inspect_48.$$arity = 0), nil) && 'inspect';
  })(Opal.const_get_relative($nesting, 'Native'), null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_to_n_49;

    return (Opal.defn(self, '$to_n', TMP_Numeric_to_n_49 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Numeric_to_n_49.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Proc_to_n_50;

    return (Opal.defn(self, '$to_n', TMP_Proc_to_n_50 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Proc_to_n_50.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_to_n_51;

    return (Opal.defn(self, '$to_n', TMP_String_to_n_51 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_String_to_n_51.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Regexp_to_n_52;

    return (Opal.defn(self, '$to_n', TMP_Regexp_to_n_52 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Regexp_to_n_52.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MatchData_to_n_53;

    def.matches = nil;
    return (Opal.defn(self, '$to_n', TMP_MatchData_to_n_53 = function $$to_n() {
      var self = this;

      return self.matches
    }, TMP_MatchData_to_n_53.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Struct_to_n_55;

    return (Opal.defn(self, '$to_n', TMP_Struct_to_n_55 = function $$to_n() {
      var TMP_54, self = this, result = nil;

      
      result = {};
      $send(self, 'each_pair', [], (TMP_54 = function(name, value){var self = TMP_54.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = Opal.const_get_relative($nesting, 'Native').$try_convert(value, value)}, TMP_54.$$s = self, TMP_54.$$arity = 2, TMP_54));
      return result;
    }, TMP_Struct_to_n_55.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_to_n_56;

    return (Opal.defn(self, '$to_n', TMP_Array_to_n_56 = function $$to_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push(Opal.const_get_relative($nesting, 'Native').$try_convert(obj, obj));
      }

      return result;
    
    }, TMP_Array_to_n_56.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean_to_n_57;

    return (Opal.defn(self, '$to_n', TMP_Boolean_to_n_57 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Boolean_to_n_57.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Time_to_n_58;

    return (Opal.defn(self, '$to_n', TMP_Time_to_n_58 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Time_to_n_58.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_to_n_59;

    return (Opal.defn(self, '$to_n', TMP_NilClass_to_n_59 = function $$to_n() {
      var self = this;

      return null
    }, TMP_NilClass_to_n_59.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_initialize_60, TMP_Hash_to_n_61;

    
    self.$alias_method("_initialize", "initialize");
    
    Opal.defn(self, '$initialize', TMP_Hash_initialize_60 = function $$initialize(defaults) {
      var self = this, $iter = TMP_Hash_initialize_60.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_initialize_60.$$p = null;
      
      if (defaults != null &&
           (defaults.constructor === undefined ||
             defaults.constructor === Object)) {
        var smap = self.$$smap,
            keys = self.$$keys,
            key, value;

        for (key in defaults) {
          value = defaults[key];

          if (value &&
               (value.constructor === undefined ||
                 value.constructor === Object)) {
            smap[key] = Opal.const_get_relative($nesting, 'Hash').$new(value);
          } else if (value && value.$$is_array) {
            value = value.map(function(item) {
              if (item &&
                   (item.constructor === undefined ||
                     item.constructor === Object)) {
                return Opal.const_get_relative($nesting, 'Hash').$new(item);
              }

              return self.$Native(item);
            });
            smap[key] = value
          } else {
            smap[key] = self.$Native(value);
          }

          keys.push(key);
        }

        return self;
      }

      return $send(self, '_initialize', [defaults], block.$to_proc());
    
    }, TMP_Hash_initialize_60.$$arity = -1);
    return (Opal.defn(self, '$to_n', TMP_Hash_to_n_61 = function $$to_n() {
      var self = this;

      
      var result = {},
          keys = self.$$keys,
          smap = self.$$smap,
          key, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = smap[key];
        } else {
          key = key.key;
          value = key.value;
        }

        result[key] = Opal.const_get_relative($nesting, 'Native').$try_convert(value, value);
      }

      return result;
    
    }, TMP_Hash_to_n_61.$$arity = 0), nil) && 'to_n';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_native_module_62;

    return (Opal.defn(self, '$native_module', TMP_Module_native_module_62 = function $$native_module() {
      var self = this;

      return Opal.global[self.$name()] = self
    }, TMP_Module_native_module_62.$$arity = 0), nil) && 'native_module'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Class_native_alias_63, TMP_Class_native_class_64;

    
    
    Opal.defn(self, '$native_alias', TMP_Class_native_alias_63 = function $$native_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.$$proto['$' + existing_mid];
      if (!aliased) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", self.$exiting_mid()));
      }
      self.$$proto[new_jsid] = aliased;
    
    }, TMP_Class_native_alias_63.$$arity = 2);
    return (Opal.defn(self, '$native_class', TMP_Class_native_class_64 = function $$native_class() {
      var self = this;

      
      self.$native_module();
      return self["new"] = self.$new;;
    }, TMP_Class_native_class_64.$$arity = 0), nil) && 'native_class';
  })($nesting[0], null, $nesting);
  return ($gvars.$ = ($gvars.global = self.$Native(Opal.global)));
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery/constants"] = function(Opal) {
  var $a, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$raise']);
  
  self.$require("native");
  if ($truthy((($a = Opal.const_get_relative($nesting, 'JQUERY_CLASS', 'skip_raise')) ? 'constant' : nil))) {
    return nil
    } else {
    return (function() {
    if ($truthy(!!Opal.global.jQuery)) {return Opal.const_set($nesting[0], 'JQUERY_CLASS', Opal.const_set($nesting[0], 'JQUERY_SELECTOR', Opal.global.jQuery))}
    else if ($truthy(!!Opal.global.Zepto)) {
    Opal.const_set($nesting[0], 'JQUERY_SELECTOR', Opal.global.Zepto);
    return Opal.const_set($nesting[0], 'JQUERY_CLASS', Opal.global.Zepto.zepto.Z);}
    else {return self.$raise(Opal.const_get_relative($nesting, 'NameError'), "Can't find jQuery or Zepto. jQuery must be included before opal-jquery")}})()
  };
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery/element"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$to_n', '$include', '$each', '$alias_native', '$attr_reader', '$call', '$nil?', '$raise', '$is_a?', '$has_key?', '$delete', '$from_object', '$gsub', '$upcase', '$[]', '$compact', '$map', '$respond_to?', '$<<', '$Native', '$arity', '$new']);
  
  self.$require("native");
  self.$require("opal/jquery/constants");
  return (function($base, $super, $parent_nesting) {
    function $Element(){};
    var self = $Element = $klass($base, $super, 'Element', $Element);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Element_find_1, TMP_Element_$$_2, TMP_Element_id_3, TMP_Element_new_4, TMP_Element_parse_5, TMP_Element_expose_7, TMP_Element_prop_8, TMP_Element_to_n_9, TMP_Element_$$_10, TMP_Element_$$$eq_11, TMP_Element_attr_12, TMP_Element_has_attribute$q_13, TMP_Element_append_to_body_14, TMP_Element_append_to_head_15, TMP_Element_at_16, TMP_Element_class_name_17, TMP_Element_class_name$eq_18, TMP_Element_css_19, TMP_Element_animate_20, TMP_Element_data_21, TMP_Element_effect_22, TMP_Element_visible$q_25, TMP_Element_offset_26, TMP_Element_each_27, TMP_Element_first_28, TMP_Element_html_29, TMP_Element_id_30, TMP_Element_id$eq_31, TMP_Element_tag_name_32, TMP_Element_inspect_33, TMP_Element_to_s_34, TMP_Element_length_35, TMP_Element_any$q_36, TMP_Element_empty$q_37, TMP_Element_on_38, TMP_Element_one_39, TMP_Element_off_40, TMP_Element_serialize_array_42, TMP_Element_value_43, TMP_Element_height_44, TMP_Element_width_45, TMP_Element_position_46, TMP_Element_$eq$eq_47, TMP_Element_respond_to_missing$q_48, TMP_Element_method_missing_49;

    
    var $ = Opal.const_get_relative($nesting, 'JQUERY_SELECTOR').$to_n();
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    Opal.defs(self, '$find', TMP_Element_find_1 = function $$find(selector) {
      var self = this;

      return $(selector)
    }, TMP_Element_find_1.$$arity = 1);
    Opal.defs(self, '$[]', TMP_Element_$$_2 = function(selector) {
      var self = this;

      return $(selector)
    }, TMP_Element_$$_2.$$arity = 1);
    Opal.defs(self, '$id', TMP_Element_id_3 = function $$id(id) {
      var self = this;

      
      var el = document.getElementById(id);

      if (!el) {
        return nil;
      }

      return $(el);
    
    }, TMP_Element_id_3.$$arity = 1);
    Opal.defs(self, '$new', TMP_Element_new_4 = function(tag) {
      var self = this;

      if (tag == null) {
        tag = "div";
      }
      return $(document.createElement(tag))
    }, TMP_Element_new_4.$$arity = -1);
    Opal.defs(self, '$parse', TMP_Element_parse_5 = function $$parse(str) {
      var self = this;

      return $.parseHTML ? $($.parseHTML(str)) : $(str)
    }, TMP_Element_parse_5.$$arity = 1);
    Opal.defs(self, '$expose', TMP_Element_expose_7 = function $$expose($a_rest) {
      var TMP_6, self = this, methods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $send(methods, 'each', [], (TMP_6 = function(method){var self = TMP_6.$$s || this;
if (method == null) method = nil;
      return self.$alias_native(method)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6))
    }, TMP_Element_expose_7.$$arity = -1);
    self.$attr_reader("selector");
    self.$alias_native("after");
    self.$alias_native("before");
    self.$alias_native("parent");
    self.$alias_native("parents");
    self.$alias_native("prev");
    self.$alias_native("remove");
    self.$alias_native("hide");
    self.$alias_native("show");
    self.$alias_native("toggle");
    self.$alias_native("children");
    self.$alias_native("blur");
    self.$alias_native("closest");
    self.$alias_native("detach");
    self.$alias_native("focus");
    self.$alias_native("find");
    self.$alias_native("next");
    self.$alias_native("siblings");
    self.$alias_native("text");
    self.$alias_native("trigger");
    self.$alias_native("append");
    self.$alias_native("prepend");
    self.$alias_native("serialize");
    self.$alias_native("is");
    self.$alias_native("filter");
    self.$alias_native("not");
    self.$alias_native("last");
    self.$alias_native("wrap");
    self.$alias_native("stop");
    self.$alias_native("clone");
    self.$alias_native("empty");
    self.$alias_native("get");
    
    Opal.defn(self, '$prop', TMP_Element_prop_8 = function $$prop($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $send(Opal.const_get_relative($nesting, 'Native'), 'call', [self, "prop"].concat(Opal.to_a(args)))
    }, TMP_Element_prop_8.$$arity = -1);
    Opal.alias(self, "succ", "next");
    Opal.alias(self, "<<", "append");
    self.$alias_native("add_class", "addClass");
    self.$alias_native("append_to", "appendTo");
    self.$alias_native("has_class?", "hasClass");
    self.$alias_native("html=", "html");
    self.$alias_native("index");
    self.$alias_native("is?", "is");
    self.$alias_native("remove_attr", "removeAttr");
    self.$alias_native("remove_class", "removeClass");
    self.$alias_native("submit");
    self.$alias_native("click");
    self.$alias_native("text=", "text");
    self.$alias_native("toggle_class", "toggleClass");
    self.$alias_native("value=", "val");
    self.$alias_native("scroll_top=", "scrollTop");
    self.$alias_native("scroll_top", "scrollTop");
    self.$alias_native("scroll_left=", "scrollLeft");
    self.$alias_native("scroll_left", "scrollLeft");
    self.$alias_native("remove_attribute", "removeAttr");
    self.$alias_native("slide_down", "slideDown");
    self.$alias_native("slide_up", "slideUp");
    self.$alias_native("slide_toggle", "slideToggle");
    self.$alias_native("fade_toggle", "fadeToggle");
    self.$alias_native("height=", "height");
    self.$alias_native("width=", "width");
    self.$alias_native("outer_width", "outerWidth");
    self.$alias_native("outer_height", "outerHeight");
    
    Opal.defn(self, '$to_n', TMP_Element_to_n_9 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Element_to_n_9.$$arity = 0);
    
    Opal.defn(self, '$[]', TMP_Element_$$_10 = function(name) {
      var self = this;

      
      var value = self.attr(name);
      if(value === undefined) return nil;
      return value;
    
    }, TMP_Element_$$_10.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Element_$$$eq_11 = function(name, value) {
      var self = this;

      
      if ($truthy(value['$nil?']())) {
        return self.removeAttr(name)};
      return self.attr(name, value);
    }, TMP_Element_$$$eq_11.$$arity = 2);
    
    Opal.defn(self, '$attr', TMP_Element_attr_12 = function $$attr($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var size = args.length;
      switch (size) {
      case 1:
        var result = self.attr(args[0]);
        return( (result == null) ? nil : result );
        break;
      case 2:
        return self.attr(args[0], args[1]);
        break;
      default:
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "#attr only accepts 1 or 2 arguments")
      }
    
    }, TMP_Element_attr_12.$$arity = -1);
    
    Opal.defn(self, '$has_attribute?', TMP_Element_has_attribute$q_13 = function(name) {
      var self = this;

      return self.attr(name) !== undefined
    }, TMP_Element_has_attribute$q_13.$$arity = 1);
    
    Opal.defn(self, '$append_to_body', TMP_Element_append_to_body_14 = function $$append_to_body() {
      var self = this;

      return self.appendTo(document.body)
    }, TMP_Element_append_to_body_14.$$arity = 0);
    
    Opal.defn(self, '$append_to_head', TMP_Element_append_to_head_15 = function $$append_to_head() {
      var self = this;

      return self.appendTo(document.head)
    }, TMP_Element_append_to_head_15.$$arity = 0);
    
    Opal.defn(self, '$at', TMP_Element_at_16 = function $$at(index) {
      var self = this;

      
      var length = self.length;

      if (index < 0) {
        index += length;
      }

      if (index < 0 || index >= length) {
        return nil;
      }

      return $(self[index]);
    
    }, TMP_Element_at_16.$$arity = 1);
    
    Opal.defn(self, '$class_name', TMP_Element_class_name_17 = function $$class_name() {
      var self = this;

      
      var first = self[0];
      return (first && first.className) || "";
    
    }, TMP_Element_class_name_17.$$arity = 0);
    
    Opal.defn(self, '$class_name=', TMP_Element_class_name$eq_18 = function(name) {
      var self = this;

      
      
      for (var i = 0, length = self.length; i < length; i++) {
        self[i].className = name;
      }
    ;
      return self;
    }, TMP_Element_class_name$eq_18.$$arity = 1);
    
    Opal.defn(self, '$css', TMP_Element_css_19 = function $$css(name, value) {
      var $a, self = this;

      if (value == null) {
        value = nil;
      }
      
      if ($truthy(($truthy($a = value['$nil?']()) ? name['$is_a?'](Opal.const_get_relative($nesting, 'String')) : $a))) {
        return self.css(name)
      } else if ($truthy(name['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
        self.css(name.$to_n())
        } else {
        self.css(name, value)
      };
      return self;
    }, TMP_Element_css_19.$$arity = -2);
    
    Opal.defn(self, '$animate', TMP_Element_animate_20 = function $$animate(params) {
      var self = this, $iter = TMP_Element_animate_20.$$p, block = $iter || nil, speed = nil;

      if ($iter) TMP_Element_animate_20.$$p = null;
      
      speed = (function() {if ($truthy(params['$has_key?']("speed"))) {
        return params.$delete("speed")
        } else {
        return 400
      }; return nil; })();
      if ((block !== nil)) {
        return self.animate(params.$to_n(), speed, block)
        } else {
        return self.animate(params.$to_n(), speed)
      };
    }, TMP_Element_animate_20.$$arity = 1);
    
    Opal.defn(self, '$data', TMP_Element_data_21 = function $$data($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var result = self.data.apply(self, args);
      if (
        (typeof(result) === 'object') && !(result instanceof Opal.const_get_relative($nesting, 'JQUERY_CLASS'))
      ) {
        result = Opal.const_get_relative($nesting, 'JSON').$from_object(result);
      }
      return result == null ? nil : result;
    
    }, TMP_Element_data_21.$$arity = -1);
    
    Opal.defn(self, '$effect', TMP_Element_effect_22 = function $$effect(name, $a_rest) {
      var TMP_23, TMP_24, self = this, args, $iter = TMP_Element_effect_22.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Element_effect_22.$$p = null;
      
      name = $send(name, 'gsub', [/_\w/], (TMP_23 = function(match){var self = TMP_23.$$s || this;
if (match == null) match = nil;
      return match['$[]'](1).$upcase()}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23));
      args = $send(args, 'map', [], (TMP_24 = function(a){var self = TMP_24.$$s || this;
if (a == null) a = nil;
      if ($truthy(a['$respond_to?']("to_n"))) {
          return a.$to_n()
          } else {
          return nil
        }}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24)).$compact();
      args['$<<'](function() { (function() {if ((block !== nil)) {
        return block.$call()
        } else {
        return nil
      }; return nil; })() });
      return self[name].apply(self, args);
    }, TMP_Element_effect_22.$$arity = -2);
    
    Opal.defn(self, '$visible?', TMP_Element_visible$q_25 = function() {
      var self = this;

      return self.is(':visible')
    }, TMP_Element_visible$q_25.$$arity = 0);
    
    Opal.defn(self, '$offset', TMP_Element_offset_26 = function $$offset() {
      var self = this;

      return self.$Native(self.offset())
    }, TMP_Element_offset_26.$$arity = 0);
    
    Opal.defn(self, '$each', TMP_Element_each_27 = function $$each() {
      var self = this, $iter = TMP_Element_each_27.$$p, $yield = $iter || nil;

      if ($iter) TMP_Element_each_27.$$p = null;
      
      for (var i = 0, length = self.length; i < length; i++) {;
      Opal.yield1($yield, $(self[i]));
      };
      return self;
    }, TMP_Element_each_27.$$arity = 0);
    
    Opal.defn(self, '$first', TMP_Element_first_28 = function $$first() {
      var self = this;

      return self.length ? self.first() : nil
    }, TMP_Element_first_28.$$arity = 0);
    
    Opal.defn(self, '$html', TMP_Element_html_29 = function $$html(content) {
      var self = this;

      
      if (content != null) {
        return self.html(content);
      }

      return self.html() || '';
    
    }, TMP_Element_html_29.$$arity = -1);
    
    Opal.defn(self, '$id', TMP_Element_id_30 = function $$id() {
      var self = this;

      
      var first = self[0];
      return (first && first.id) || "";
    
    }, TMP_Element_id_30.$$arity = 0);
    
    Opal.defn(self, '$id=', TMP_Element_id$eq_31 = function(id) {
      var self = this;

      
      var first = self[0];

      if (first) {
        first.id = id;
      }

      return self;
    
    }, TMP_Element_id$eq_31.$$arity = 1);
    
    Opal.defn(self, '$tag_name', TMP_Element_tag_name_32 = function $$tag_name() {
      var self = this;

      return self.length > 0 ? self[0].tagName.toLowerCase() : nil
    }, TMP_Element_tag_name_32.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_Element_inspect_33 = function $$inspect() {
      var self = this;

      
      if      (self[0] === document) return '#<Element [document]>'
      else if (self[0] === window  ) return '#<Element [window]>'

      var val, el, str, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];
        if (!el.tagName) { return '#<Element ['+el.toString()+']'; }

        str = "<" + el.tagName.toLowerCase();

        if (val = el.id) str += (' id="' + val + '"');
        if (val = el.className) str += (' class="' + val + '"');

        result.push(str + '>');
      }

      return '#<Element [' + result.join(', ') + ']>';
    
    }, TMP_Element_inspect_33.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Element_to_s_34 = function $$to_s() {
      var self = this;

      
      var val, el, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];

        result.push(el.outerHTML)
      }

      return result.join(', ');
    
    }, TMP_Element_to_s_34.$$arity = 0);
    
    Opal.defn(self, '$length', TMP_Element_length_35 = function $$length() {
      var self = this;

      return self.length
    }, TMP_Element_length_35.$$arity = 0);
    
    Opal.defn(self, '$any?', TMP_Element_any$q_36 = function() {
      var self = this;

      return self.length > 0
    }, TMP_Element_any$q_36.$$arity = 0);
    
    Opal.defn(self, '$empty?', TMP_Element_empty$q_37 = function() {
      var self = this;

      return self.length === 0
    }, TMP_Element_empty$q_37.$$arity = 0);
    Opal.alias(self, "empty?", "none?");
    
    Opal.defn(self, '$on', TMP_Element_on_38 = function $$on(name, sel) {
      var self = this, $iter = TMP_Element_on_38.$$p, block = $iter || nil;

      if (sel == null) {
        sel = nil;
      }
      if ($iter) TMP_Element_on_38.$$p = null;
      
      
      var has_args = block.$arity() !== 0;

      var wrapper = function() {
        for(var args = new Array(arguments.length), i = 0, ii = args.length; i < ii; i++) {
          args[i] = arguments[i];
        }

        // Use preventDefault as a canary for native events
        if (has_args && args[0].preventDefault) {
          args[0] = Opal.const_get_relative($nesting, 'Event').$new(args[0]);
        }

        return block.apply(null, args);
      };

      block.$$jqwrap = wrapper;

      if (sel == nil) {
        self.on(name, wrapper);
      }
      else {
        self.on(name, sel, wrapper);
      }
    ;
      return block;
    }, TMP_Element_on_38.$$arity = -2);
    
    Opal.defn(self, '$one', TMP_Element_one_39 = function $$one(name, sel) {
      var self = this, $iter = TMP_Element_one_39.$$p, block = $iter || nil;

      if (sel == null) {
        sel = nil;
      }
      if ($iter) TMP_Element_one_39.$$p = null;
      
      
      var has_args = block.$arity() !== 0;

      var wrapper = function() {
        for(var args = new Array(arguments.length), i = 0, ii = args.length; i < ii; i++) {
          args[i] = arguments[i];
        }

        // Use preventDefault as a canary for native events
        if (has_args && args[0].preventDefault) {
          args[0] = Opal.const_get_relative($nesting, 'Event').$new(args[0]);
        }

        return block.apply(null, args);
      };

      block.$$jqwrap = wrapper;

      if (sel == nil) {
        self.one(name, wrapper);
      }
      else {
        self.one(name, sel, wrapper);
      }
    ;
      return block;
    }, TMP_Element_one_39.$$arity = -2);
    
    Opal.defn(self, '$off', TMP_Element_off_40 = function $$off(name, sel, block) {
      var self = this;

      if (block == null) {
        block = nil;
      }
      
      if (sel == null) {
        return self.off(name);
      }
      else if (block === nil) {
        return self.off(name, sel.$$jqwrap);
      }
      else {
        return self.off(name, sel, block.$$jqwrap);
      }
    
    }, TMP_Element_off_40.$$arity = -3);
    
    Opal.defn(self, '$serialize_array', TMP_Element_serialize_array_42 = function $$serialize_array() {
      var TMP_41, self = this;

      return $send((self.serializeArray()), 'map', [], (TMP_41 = function(e){var self = TMP_41.$$s || this;
if (e == null) e = nil;
      return Opal.const_get_relative($nesting, 'Hash').$new(e)}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41))
    }, TMP_Element_serialize_array_42.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.defn(self, '$value', TMP_Element_value_43 = function $$value() {
      var $a, self = this;

      return ($truthy($a = self.val()) ? $a : "")
    }, TMP_Element_value_43.$$arity = 0);
    
    Opal.defn(self, '$height', TMP_Element_height_44 = function $$height() {
      var $a, self = this;

      return ($truthy($a = self.height()) ? $a : nil)
    }, TMP_Element_height_44.$$arity = 0);
    
    Opal.defn(self, '$width', TMP_Element_width_45 = function $$width() {
      var $a, self = this;

      return ($truthy($a = self.width()) ? $a : nil)
    }, TMP_Element_width_45.$$arity = 0);
    
    Opal.defn(self, '$position', TMP_Element_position_46 = function $$position() {
      var self = this;

      return self.$Native(self.position())
    }, TMP_Element_position_46.$$arity = 0);
    
    Opal.defn(self, '$==', TMP_Element_$eq$eq_47 = function(other) {
      var self = this;

      return self.is(other)
    }, TMP_Element_$eq$eq_47.$$arity = 1);
    
    Opal.defn(self, '$respond_to_missing?', TMP_Element_respond_to_missing$q_48 = function(name, _) {
      var self = this, $iter = TMP_Element_respond_to_missing$q_48.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Element_respond_to_missing$q_48.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      var method = self[name];
      if (typeof(method) === 'function') {
        return true;
      } else {
        return $send(self, Opal.find_super_dispatcher(self, 'respond_to_missing?', TMP_Element_respond_to_missing$q_48, false), $zuper, $iter);
      }
    
    }, TMP_Element_respond_to_missing$q_48.$$arity = 2);
    return (Opal.defn(self, '$method_missing', TMP_Element_method_missing_49 = function $$method_missing(name, $a_rest) {
      var self = this, args, $iter = TMP_Element_method_missing_49.$$p, block = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Element_method_missing_49.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ((block !== nil)) {
        args['$<<'](block)};
      
      var method = self[name];
      if (typeof(method) === 'function') {
        return method.apply(self, args.$to_n());
      } else {
        return $send(self, Opal.find_super_dispatcher(self, 'method_missing', TMP_Element_method_missing_49, false), $zuper, $iter);
      }
    ;
    }, TMP_Element_method_missing_49.$$arity = -2), nil) && 'method_missing';
  })($nesting[0], Opal.const_get_relative($nesting, 'JQUERY_CLASS').$to_n(), $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery/window"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$find', '$on', '$element', '$to_proc', '$off', '$trigger', '$new']);
  
  self.$require("opal/jquery/element");
  (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), $a, $b, TMP_Window_element_1, TMP_Window_on_2, TMP_Window_off_3, TMP_Window_trigger_4;

      def.element = nil;
      
      self.$include((function() {if ($truthy((($b = Opal.const_get_relative($nesting, 'Native', 'skip_raise')) && ($a = Opal.const_get_qualified($b, 'Wrapper', 'skip_raise')) ? 'constant' : nil))) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Wrapper')
        } else {
        return Opal.const_get_relative($nesting, 'Native')
      }; return nil; })());
      
      Opal.defn(self, '$element', TMP_Window_element_1 = function $$element() {
        var $a, self = this;

        return (self.element = ($truthy($a = self.element) ? $a : Opal.const_get_relative($nesting, 'Element').$find(window)))
      }, TMP_Window_element_1.$$arity = 0);
      
      Opal.defn(self, '$on', TMP_Window_on_2 = function $$on($a_rest) {
        var self = this, args, $iter = TMP_Window_on_2.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_Window_on_2.$$p = null;
        return $send(self.$element(), 'on', Opal.to_a(args), block.$to_proc())
      }, TMP_Window_on_2.$$arity = -1);
      
      Opal.defn(self, '$off', TMP_Window_off_3 = function $$off($a_rest) {
        var self = this, args, $iter = TMP_Window_off_3.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_Window_off_3.$$p = null;
        return $send(self.$element(), 'off', Opal.to_a(args), block.$to_proc())
      }, TMP_Window_off_3.$$arity = -1);
      return (Opal.defn(self, '$trigger', TMP_Window_trigger_4 = function $$trigger($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(self.$element(), 'trigger', Opal.to_a(args))
      }, TMP_Window_trigger_4.$$arity = -1), nil) && 'trigger';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  Opal.const_set($nesting[0], 'Window', Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Window').$new(window));
  return ($gvars.window = Opal.const_get_relative($nesting, 'Window'));
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery/document"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$to_n', '$call', '$new', '$ready?', '$resolve', '$module_function', '$find', '$extend']);
  
  self.$require("opal/jquery/constants");
  self.$require("opal/jquery/element");
  (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DocumentMethods, self = $DocumentMethods = $module($base, 'DocumentMethods');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DocumentMethods_ready$q_1, TMP_DocumentMethods_ready_3, TMP_DocumentMethods_4, TMP_DocumentMethods_title_5, TMP_DocumentMethods_title$eq_6, TMP_DocumentMethods_head_7, TMP_DocumentMethods_body_8;

      
      var $ = Opal.const_get_relative($nesting, 'JQUERY_SELECTOR').$to_n();
      
      Opal.defn(self, '$ready?', TMP_DocumentMethods_ready$q_1 = function() {
        var $a, self = this, $iter = TMP_DocumentMethods_ready$q_1.$$p, block = $iter || nil;

        if ($iter) TMP_DocumentMethods_ready$q_1.$$p = null;
        if ((block !== nil)) {
          if ($truthy((($a = $DocumentMethods.$$cvars['@@__isReady']) == null ? nil : $a))) {
            return block.$call()
            } else {
            return $(block)
          }
          } else {
          return nil
        }
      }, TMP_DocumentMethods_ready$q_1.$$arity = 0);
      
      Opal.defn(self, '$ready', TMP_DocumentMethods_ready_3 = function $$ready() {
        var TMP_2, self = this, promise = nil;

        
        promise = Opal.const_get_relative($nesting, 'Promise').$new();
        $send(Opal.const_get_relative($nesting, 'Document'), 'ready?', [], (TMP_2 = function(){var self = TMP_2.$$s || this;

        return promise.$resolve()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2));
        return promise;
      }, TMP_DocumentMethods_ready_3.$$arity = 0);
      self.$module_function("ready?");
      $send(self, 'ready?', [], (TMP_DocumentMethods_4 = function(){var self = TMP_DocumentMethods_4.$$s || this;

      return (Opal.class_variable_set($DocumentMethods, '@@__isReady', true))}, TMP_DocumentMethods_4.$$s = self, TMP_DocumentMethods_4.$$arity = 0, TMP_DocumentMethods_4));
      
      Opal.defn(self, '$title', TMP_DocumentMethods_title_5 = function $$title() {
        var self = this;

        return document.title
      }, TMP_DocumentMethods_title_5.$$arity = 0);
      
      Opal.defn(self, '$title=', TMP_DocumentMethods_title$eq_6 = function(title) {
        var self = this;

        return document.title = title
      }, TMP_DocumentMethods_title$eq_6.$$arity = 1);
      
      Opal.defn(self, '$head', TMP_DocumentMethods_head_7 = function $$head() {
        var self = this;

        return Opal.const_get_relative($nesting, 'Element').$find(document.head)
      }, TMP_DocumentMethods_head_7.$$arity = 0);
      
      Opal.defn(self, '$body', TMP_DocumentMethods_body_8 = function $$body() {
        var self = this;

        return Opal.const_get_relative($nesting, 'Element').$find(document.body)
      }, TMP_DocumentMethods_body_8.$$arity = 0);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  Opal.const_set($nesting[0], 'Document', Opal.const_get_relative($nesting, 'Element').$find(document));
  Opal.const_get_relative($nesting, 'Document').$extend(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'DocumentMethods'));
  return ($gvars.document = Opal.const_get_relative($nesting, 'Document'));
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery/event"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$to_n', '$stop', '$prevent']);
  
  self.$require("opal/jquery/constants");
  return (function($base, $super, $parent_nesting) {
    function $Event(){};
    var self = $Event = $klass($base, $super, 'Event', $Event);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Event_initialize_1, TMP_Event_to_n_2, TMP_Event_$$_3, TMP_Event_type_4, TMP_Event_element_5, TMP_Event_target_6, TMP_Event_prevented$q_7, TMP_Event_prevent_8, TMP_Event_stopped$q_9, TMP_Event_stop_10, TMP_Event_stop_immediate_11, TMP_Event_kill_12, TMP_Event_page_x_13, TMP_Event_page_y_14, TMP_Event_touch_x_15, TMP_Event_touch_y_16, TMP_Event_ctrl_key_17, TMP_Event_meta_key_18, TMP_Event_alt_key_19, TMP_Event_shift_key_20, TMP_Event_key_code_21, TMP_Event_which_22;

    def["native"] = nil;
    
    var $ = Opal.const_get_relative($nesting, 'JQUERY_SELECTOR').$to_n();
    
    Opal.defn(self, '$initialize', TMP_Event_initialize_1 = function $$initialize(native$) {
      var self = this;

      return (self["native"] = native$)
    }, TMP_Event_initialize_1.$$arity = 1);
    
    Opal.defn(self, '$to_n', TMP_Event_to_n_2 = function $$to_n() {
      var self = this;

      return self["native"]
    }, TMP_Event_to_n_2.$$arity = 0);
    
    Opal.defn(self, '$[]', TMP_Event_$$_3 = function(name) {
      var self = this;

      return self["native"][name]
    }, TMP_Event_$$_3.$$arity = 1);
    
    Opal.defn(self, '$type', TMP_Event_type_4 = function $$type() {
      var self = this;

      return self["native"].type
    }, TMP_Event_type_4.$$arity = 0);
    
    Opal.defn(self, '$element', TMP_Event_element_5 = function $$element() {
      var self = this;

      return $(self["native"].currentTarget)
    }, TMP_Event_element_5.$$arity = 0);
    Opal.alias(self, "current_target", "element");
    
    Opal.defn(self, '$target', TMP_Event_target_6 = function $$target() {
      var self = this;

      return $(self["native"].target)
    }, TMP_Event_target_6.$$arity = 0);
    
    Opal.defn(self, '$prevented?', TMP_Event_prevented$q_7 = function() {
      var self = this;

      return self["native"].isDefaultPrevented()
    }, TMP_Event_prevented$q_7.$$arity = 0);
    
    Opal.defn(self, '$prevent', TMP_Event_prevent_8 = function $$prevent() {
      var self = this;

      return self["native"].preventDefault()
    }, TMP_Event_prevent_8.$$arity = 0);
    
    Opal.defn(self, '$stopped?', TMP_Event_stopped$q_9 = function() {
      var self = this;

      return self["native"].isPropagationStopped()
    }, TMP_Event_stopped$q_9.$$arity = 0);
    
    Opal.defn(self, '$stop', TMP_Event_stop_10 = function $$stop() {
      var self = this;

      return self["native"].stopPropagation()
    }, TMP_Event_stop_10.$$arity = 0);
    
    Opal.defn(self, '$stop_immediate', TMP_Event_stop_immediate_11 = function $$stop_immediate() {
      var self = this;

      return self["native"].stopImmediatePropagation()
    }, TMP_Event_stop_immediate_11.$$arity = 0);
    
    Opal.defn(self, '$kill', TMP_Event_kill_12 = function $$kill() {
      var self = this;

      
      self.$stop();
      return self.$prevent();
    }, TMP_Event_kill_12.$$arity = 0);
    
    Opal.defn(self, '$page_x', TMP_Event_page_x_13 = function $$page_x() {
      var self = this;

      return self["native"].pageX
    }, TMP_Event_page_x_13.$$arity = 0);
    
    Opal.defn(self, '$page_y', TMP_Event_page_y_14 = function $$page_y() {
      var self = this;

      return self["native"].pageY
    }, TMP_Event_page_y_14.$$arity = 0);
    
    Opal.defn(self, '$touch_x', TMP_Event_touch_x_15 = function $$touch_x() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageX
    }, TMP_Event_touch_x_15.$$arity = 0);
    
    Opal.defn(self, '$touch_y', TMP_Event_touch_y_16 = function $$touch_y() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageY
    }, TMP_Event_touch_y_16.$$arity = 0);
    
    Opal.defn(self, '$ctrl_key', TMP_Event_ctrl_key_17 = function $$ctrl_key() {
      var self = this;

      return self["native"].ctrlKey
    }, TMP_Event_ctrl_key_17.$$arity = 0);
    
    Opal.defn(self, '$meta_key', TMP_Event_meta_key_18 = function $$meta_key() {
      var self = this;

      return self["native"].metaKey
    }, TMP_Event_meta_key_18.$$arity = 0);
    
    Opal.defn(self, '$alt_key', TMP_Event_alt_key_19 = function $$alt_key() {
      var self = this;

      return self["native"].altKey
    }, TMP_Event_alt_key_19.$$arity = 0);
    
    Opal.defn(self, '$shift_key', TMP_Event_shift_key_20 = function $$shift_key() {
      var self = this;

      return self["native"].shiftKey
    }, TMP_Event_shift_key_20.$$arity = 0);
    
    Opal.defn(self, '$key_code', TMP_Event_key_code_21 = function $$key_code() {
      var self = this;

      return self["native"].keyCode
    }, TMP_Event_key_code_21.$$arity = 0);
    
    Opal.defn(self, '$which', TMP_Event_which_22 = function $$which() {
      var self = this;

      return self["native"].which
    }, TMP_Event_which_22.$$arity = 0);
    Opal.alias(self, "default_prevented?", "prevented?");
    Opal.alias(self, "prevent_default", "prevent");
    Opal.alias(self, "propagation_stopped?", "stopped?");
    Opal.alias(self, "stop_propagation", "stop");
    return Opal.alias(self, "stop_immediate_propagation", "stop_immediate");
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["json"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$raise', '$new', '$push', '$[]=', '$-', '$[]', '$create_id', '$json_create', '$const_get', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$merge', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  
  (function($base, $parent_nesting) {
    var $JSON, self = $JSON = $module($base, 'JSON');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_JSON_$$_1, TMP_JSON_parse_2, TMP_JSON_parse$B_3, TMP_JSON_load_4, TMP_JSON_from_object_5, TMP_JSON_generate_6, TMP_JSON_dump_7, $writer = nil;

    
    (function($base, $super, $parent_nesting) {
      function $JSONError(){};
      var self = $JSONError = $klass($base, $super, 'JSONError', $JSONError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $ParserError(){};
      var self = $ParserError = $klass($base, $super, 'ParserError', $ParserError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'JSONError'), $nesting);
    
    var $hasOwn = Opal.hasOwnProperty;

    function $parse(source) {
      try {
        return JSON.parse(source);
      } catch (e) {
        self.$raise(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'JSON'), 'ParserError'), e.message);
      }
    };

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'null':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                (($writer = [k, to_opal(value[k], options)]), $send((hash), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }
            }

            if (!options.parse && (klass = (hash)['$[]'](Opal.const_get_relative($nesting, 'JSON').$create_id())) != nil) {
              return Opal.const_get_qualified('::', 'Object').$const_get(klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  ;
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = ["json_class"];
    $send(self, 'create_id=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    Opal.defs(self, '$[]', TMP_JSON_$$_1 = function(value, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](value))) {
        return self.$parse(value, options)
        } else {
        return self.$generate(value, options)
      }
    }, TMP_JSON_$$_1.$$arity = -2);
    Opal.defs(self, '$parse', TMP_JSON_parse_2 = function $$parse(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})))
    }, TMP_JSON_parse_2.$$arity = -2);
    Opal.defs(self, '$parse!', TMP_JSON_parse$B_3 = function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$parse(source, options)
    }, TMP_JSON_parse$B_3.$$arity = -2);
    Opal.defs(self, '$load', TMP_JSON_load_4 = function $$load(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options)
    }, TMP_JSON_load_4.$$arity = -2);
    Opal.defs(self, '$from_object', TMP_JSON_from_object_5 = function $$from_object(js_object, options) {
      var $a, self = this, $writer = nil;

      if (options == null) {
        options = $hash2([], {});
      }
      
      ($truthy($a = options['$[]']("object_class")) ? $a : (($writer = ["object_class", Opal.const_get_relative($nesting, 'Hash')]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      ($truthy($a = options['$[]']("array_class")) ? $a : (($writer = ["array_class", Opal.const_get_relative($nesting, 'Array')]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      return to_opal(js_object, options.$$smap);
    }, TMP_JSON_from_object_5.$$arity = -2);
    Opal.defs(self, '$generate', TMP_JSON_generate_6 = function $$generate(obj, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return obj.$to_json(options)
    }, TMP_JSON_generate_6.$$arity = -2);
    Opal.defs(self, '$dump', TMP_JSON_dump_7 = function $$dump(obj, io, limit) {
      var self = this, string = nil;

      if (io == null) {
        io = nil;
      }
      if (limit == null) {
        limit = nil;
      }
      
      string = self.$generate(obj);
      if ($truthy(io)) {
        
        if ($truthy(io['$responds_to?']("to_io"))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
        } else {
        return string
      };
    }, TMP_JSON_dump_7.$$arity = -2);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_to_json_8;

    return (Opal.defn(self, '$to_json', TMP_Object_to_json_8 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, TMP_Object_to_json_8.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerable_to_json_9;

    
    Opal.defn(self, '$to_json', TMP_Enumerable_to_json_9 = function $$to_json() {
      var self = this;

      return self.$to_a().$to_json()
    }, TMP_Enumerable_to_json_9.$$arity = 0)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_to_json_10;

    return (Opal.defn(self, '$to_json', TMP_Array_to_json_10 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(', ') + ']';
    
    }, TMP_Array_to_json_10.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean_to_json_11;

    return (Opal.defn(self, '$to_json', TMP_Boolean_to_json_11 = function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false'
    }, TMP_Boolean_to_json_11.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_to_json_12;

    return (Opal.defn(self, '$to_json', TMP_Hash_to_json_12 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(', ') + '}';
    
    }, TMP_Hash_to_json_12.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_to_json_13;

    return (Opal.defn(self, '$to_json', TMP_NilClass_to_json_13 = function $$to_json() {
      var self = this;

      return "null"
    }, TMP_NilClass_to_json_13.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_to_json_14;

    return (Opal.defn(self, '$to_json', TMP_Numeric_to_json_14 = function $$to_json() {
      var self = this;

      return self.toString()
    }, TMP_Numeric_to_json_14.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return Opal.alias(self, "to_json", "inspect")
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Time_to_json_15;

    return (Opal.defn(self, '$to_json', TMP_Time_to_json_15 = function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json()
    }, TMP_Time_to_json_15.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Date_to_json_16, TMP_Date_as_json_17;

    
    
    Opal.defn(self, '$to_json', TMP_Date_to_json_16 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, TMP_Date_to_json_16.$$arity = 0);
    return (Opal.defn(self, '$as_json', TMP_Date_as_json_17 = function $$as_json() {
      var self = this;

      return self.$to_s()
    }, TMP_Date_as_json_17.$$arity = 0), nil) && 'as_json';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["promise"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$resolve', '$new', '$reject', '$attr_reader', '$===', '$value', '$has_key?', '$keys', '$!', '$==', '$<<', '$>>', '$exception?', '$[]', '$resolved?', '$rejected?', '$error', '$include?', '$action', '$realized?', '$raise', '$^', '$call', '$resolve!', '$exception!', '$any?', '$each', '$reject!', '$there_can_be_only_one!', '$then', '$to_proc', '$fail', '$always', '$trace', '$class', '$object_id', '$+', '$inspect', '$act?', '$nil?', '$prev', '$push', '$concat', '$it', '$proc', '$reverse', '$pop', '$<=', '$length', '$shift', '$-', '$wait', '$map', '$reduce', '$try', '$tap', '$all?', '$find']);
  return (function($base, $super, $parent_nesting) {
    function $Promise(){};
    var self = $Promise = $klass($base, $super, 'Promise', $Promise);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Promise_value_1, TMP_Promise_error_2, TMP_Promise_when_3, TMP_Promise_initialize_4, TMP_Promise_value_5, TMP_Promise_act$q_6, TMP_Promise_action_7, TMP_Promise_exception$q_8, TMP_Promise_realized$q_9, TMP_Promise_resolved$q_10, TMP_Promise_rejected$q_11, TMP_Promise_$_12, TMP_Promise_$lt$lt_13, TMP_Promise_$gt$gt_14, TMP_Promise_resolve_15, TMP_Promise_resolve$B_17, TMP_Promise_reject_18, TMP_Promise_reject$B_20, TMP_Promise_exception$B_21, TMP_Promise_then_22, TMP_Promise_then$B_23, TMP_Promise_fail_24, TMP_Promise_fail$B_25, TMP_Promise_always_26, TMP_Promise_always$B_27, TMP_Promise_trace_28, TMP_Promise_trace$B_29, TMP_Promise_there_can_be_only_one$B_30, TMP_Promise_inspect_31;

    def.value = def.action = def.exception = def.realized = def.next = def.delayed = def.error = def.prev = nil;
    
    Opal.defs(self, '$value', TMP_Promise_value_1 = function $$value(value) {
      var self = this;

      return self.$new().$resolve(value)
    }, TMP_Promise_value_1.$$arity = 1);
    Opal.defs(self, '$error', TMP_Promise_error_2 = function $$error(value) {
      var self = this;

      return self.$new().$reject(value)
    }, TMP_Promise_error_2.$$arity = 1);
    Opal.defs(self, '$when', TMP_Promise_when_3 = function $$when($a_rest) {
      var self = this, promises;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      promises = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        promises[$arg_idx - 0] = arguments[$arg_idx];
      }
      return Opal.const_get_relative($nesting, 'When').$new(promises)
    }, TMP_Promise_when_3.$$arity = -1);
    self.$attr_reader("error", "prev", "next");
    
    Opal.defn(self, '$initialize', TMP_Promise_initialize_4 = function $$initialize(action) {
      var self = this;

      if (action == null) {
        action = $hash2([], {});
      }
      
      self.action = action;
      self.realized = false;
      self.exception = false;
      self.value = nil;
      self.error = nil;
      self.delayed = false;
      self.prev = nil;
      return (self.next = []);
    }, TMP_Promise_initialize_4.$$arity = -1);
    
    Opal.defn(self, '$value', TMP_Promise_value_5 = function $$value() {
      var self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Promise')['$==='](self.value))) {
        return self.value.$value()
        } else {
        return self.value
      }
    }, TMP_Promise_value_5.$$arity = 0);
    
    Opal.defn(self, '$act?', TMP_Promise_act$q_6 = function() {
      var $a, self = this;

      return ($truthy($a = self.action['$has_key?']("success")) ? $a : self.action['$has_key?']("always"))
    }, TMP_Promise_act$q_6.$$arity = 0);
    
    Opal.defn(self, '$action', TMP_Promise_action_7 = function $$action() {
      var self = this;

      return self.action.$keys()
    }, TMP_Promise_action_7.$$arity = 0);
    
    Opal.defn(self, '$exception?', TMP_Promise_exception$q_8 = function() {
      var self = this;

      return self.exception
    }, TMP_Promise_exception$q_8.$$arity = 0);
    
    Opal.defn(self, '$realized?', TMP_Promise_realized$q_9 = function() {
      var self = this;

      return self.realized['$!']()['$!']()
    }, TMP_Promise_realized$q_9.$$arity = 0);
    
    Opal.defn(self, '$resolved?', TMP_Promise_resolved$q_10 = function() {
      var self = this;

      return self.realized['$==']("resolve")
    }, TMP_Promise_resolved$q_10.$$arity = 0);
    
    Opal.defn(self, '$rejected?', TMP_Promise_rejected$q_11 = function() {
      var self = this;

      return self.realized['$==']("reject")
    }, TMP_Promise_rejected$q_11.$$arity = 0);
    
    Opal.defn(self, '$^', TMP_Promise_$_12 = function(promise) {
      var self = this;

      
      promise['$<<'](self);
      self['$>>'](promise);
      return promise;
    }, TMP_Promise_$_12.$$arity = 1);
    
    Opal.defn(self, '$<<', TMP_Promise_$lt$lt_13 = function(promise) {
      var self = this;

      
      self.prev = promise;
      return self;
    }, TMP_Promise_$lt$lt_13.$$arity = 1);
    
    Opal.defn(self, '$>>', TMP_Promise_$gt$gt_14 = function(promise) {
      var $a, self = this;

      
      self.next['$<<'](promise);
      if ($truthy(self['$exception?']())) {
        promise.$reject(self.delayed['$[]'](0))
      } else if ($truthy(self['$resolved?']())) {
        promise.$resolve((function() {if ($truthy(self.delayed)) {
          return self.delayed['$[]'](0)
          } else {
          return self.$value()
        }; return nil; })())
      } else if ($truthy(self['$rejected?']())) {
        if ($truthy(($truthy($a = self.action['$has_key?']("failure")['$!']()) ? $a : Opal.const_get_relative($nesting, 'Promise')['$===']((function() {if ($truthy(self.delayed)) {
          return self.delayed['$[]'](0)
          } else {
          return self.error
        }; return nil; })())))) {
          promise.$reject((function() {if ($truthy(self.delayed)) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())
        } else if ($truthy(promise.$action()['$include?']("always"))) {
          promise.$reject((function() {if ($truthy(self.delayed)) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())}};
      return self;
    }, TMP_Promise_$gt$gt_14.$$arity = 1);
    
    Opal.defn(self, '$resolve', TMP_Promise_resolve_15 = function $$resolve(value) {
      var $a, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      
      if ($truthy(self['$realized?']())) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "the promise has already been realized")};
      if ($truthy(Opal.const_get_relative($nesting, 'Promise')['$==='](value))) {
        return value['$<<'](self.prev)['$^'](self)};
      
      try {
        
        if ($truthy((block = ($truthy($a = self.action['$[]']("success")) ? $a : self.action['$[]']("always"))))) {
          value = block.$call(value)};
        self['$resolve!'](value);
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      return self;
    }, TMP_Promise_resolve_15.$$arity = -1);
    
    Opal.defn(self, '$resolve!', TMP_Promise_resolve$B_17 = function(value) {
      var TMP_16, self = this;

      
      self.realized = "resolve";
      self.value = value;
      if ($truthy(self.next['$any?']())) {
        return $send(self.next, 'each', [], (TMP_16 = function(p){var self = TMP_16.$$s || this;
if (p == null) p = nil;
        return p.$resolve(value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))
        } else {
        return (self.delayed = [value])
      };
    }, TMP_Promise_resolve$B_17.$$arity = 1);
    
    Opal.defn(self, '$reject', TMP_Promise_reject_18 = function $$reject(value) {
      var $a, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      
      if ($truthy(self['$realized?']())) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "the promise has already been realized")};
      if ($truthy(Opal.const_get_relative($nesting, 'Promise')['$==='](value))) {
        return value['$<<'](self.prev)['$^'](self)};
      
      try {
        
        if ($truthy((block = ($truthy($a = self.action['$[]']("failure")) ? $a : self.action['$[]']("always"))))) {
          value = block.$call(value)};
        if ($truthy(self.action['$has_key?']("always"))) {
          self['$resolve!'](value)
          } else {
          self['$reject!'](value)
        };
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      return self;
    }, TMP_Promise_reject_18.$$arity = -1);
    
    Opal.defn(self, '$reject!', TMP_Promise_reject$B_20 = function(value) {
      var TMP_19, self = this;

      
      self.realized = "reject";
      self.error = value;
      if ($truthy(self.next['$any?']())) {
        return $send(self.next, 'each', [], (TMP_19 = function(p){var self = TMP_19.$$s || this;
if (p == null) p = nil;
        return p.$reject(value)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19))
        } else {
        return (self.delayed = [value])
      };
    }, TMP_Promise_reject$B_20.$$arity = 1);
    
    Opal.defn(self, '$exception!', TMP_Promise_exception$B_21 = function(error) {
      var self = this;

      
      self.exception = true;
      return self['$reject!'](error);
    }, TMP_Promise_exception$B_21.$$arity = 1);
    
    Opal.defn(self, '$then', TMP_Promise_then_22 = function $$then() {
      var self = this, $iter = TMP_Promise_then_22.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_then_22.$$p = null;
      return self['$^'](Opal.const_get_relative($nesting, 'Promise').$new($hash2(["success"], {"success": block})))
    }, TMP_Promise_then_22.$$arity = 0);
    
    Opal.defn(self, '$then!', TMP_Promise_then$B_23 = function() {
      var self = this, $iter = TMP_Promise_then$B_23.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_then$B_23.$$p = null;
      
      self['$there_can_be_only_one!']();
      return $send(self, 'then', [], block.$to_proc());
    }, TMP_Promise_then$B_23.$$arity = 0);
    Opal.alias(self, "do", "then");
    Opal.alias(self, "do!", "then!");
    
    Opal.defn(self, '$fail', TMP_Promise_fail_24 = function $$fail() {
      var self = this, $iter = TMP_Promise_fail_24.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_fail_24.$$p = null;
      return self['$^'](Opal.const_get_relative($nesting, 'Promise').$new($hash2(["failure"], {"failure": block})))
    }, TMP_Promise_fail_24.$$arity = 0);
    
    Opal.defn(self, '$fail!', TMP_Promise_fail$B_25 = function() {
      var self = this, $iter = TMP_Promise_fail$B_25.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_fail$B_25.$$p = null;
      
      self['$there_can_be_only_one!']();
      return $send(self, 'fail', [], block.$to_proc());
    }, TMP_Promise_fail$B_25.$$arity = 0);
    Opal.alias(self, "rescue", "fail");
    Opal.alias(self, "catch", "fail");
    Opal.alias(self, "rescue!", "fail!");
    Opal.alias(self, "catch!", "fail!");
    
    Opal.defn(self, '$always', TMP_Promise_always_26 = function $$always() {
      var self = this, $iter = TMP_Promise_always_26.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_always_26.$$p = null;
      return self['$^'](Opal.const_get_relative($nesting, 'Promise').$new($hash2(["always"], {"always": block})))
    }, TMP_Promise_always_26.$$arity = 0);
    
    Opal.defn(self, '$always!', TMP_Promise_always$B_27 = function() {
      var self = this, $iter = TMP_Promise_always$B_27.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_always$B_27.$$p = null;
      
      self['$there_can_be_only_one!']();
      return $send(self, 'always', [], block.$to_proc());
    }, TMP_Promise_always$B_27.$$arity = 0);
    Opal.alias(self, "finally", "always");
    Opal.alias(self, "ensure", "always");
    Opal.alias(self, "finally!", "always!");
    Opal.alias(self, "ensure!", "always!");
    
    Opal.defn(self, '$trace', TMP_Promise_trace_28 = function $$trace(depth) {
      var self = this, $iter = TMP_Promise_trace_28.$$p, block = $iter || nil;

      if (depth == null) {
        depth = nil;
      }
      if ($iter) TMP_Promise_trace_28.$$p = null;
      return self['$^'](Opal.const_get_relative($nesting, 'Trace').$new(depth, block))
    }, TMP_Promise_trace_28.$$arity = -1);
    
    Opal.defn(self, '$trace!', TMP_Promise_trace$B_29 = function($a_rest) {
      var self = this, args, $iter = TMP_Promise_trace$B_29.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Promise_trace$B_29.$$p = null;
      
      self['$there_can_be_only_one!']();
      return $send(self, 'trace', Opal.to_a(args), block.$to_proc());
    }, TMP_Promise_trace$B_29.$$arity = -1);
    
    Opal.defn(self, '$there_can_be_only_one!', TMP_Promise_there_can_be_only_one$B_30 = function() {
      var self = this;

      if ($truthy(self.next['$any?']())) {
        return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "a promise has already been chained")
        } else {
        return nil
      }
    }, TMP_Promise_there_can_be_only_one$B_30.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_Promise_inspect_31 = function $$inspect() {
      var $a, self = this, result = nil;

      
      result = "" + "#<" + (self.$class()) + "(" + (self.$object_id()) + ")";
      if ($truthy(self.next['$any?']())) {
        result = $rb_plus(result, "" + " >> " + (self.next.$inspect()))};
      if ($truthy(self['$realized?']())) {
        result = $rb_plus(result, "" + ": " + (($truthy($a = self.value) ? $a : self.error).$inspect()) + ">")
        } else {
        result = $rb_plus(result, ">")
      };
      return result;
    }, TMP_Promise_inspect_31.$$arity = 0);
    (function($base, $super, $parent_nesting) {
      function $Trace(){};
      var self = $Trace = $klass($base, $super, 'Trace', $Trace);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Trace_it_32, TMP_Trace_initialize_33;

      
      Opal.defs(self, '$it', TMP_Trace_it_32 = function $$it(promise) {
        var $a, self = this, current = nil, prev = nil;

        
        current = [];
        if ($truthy(($truthy($a = promise['$act?']()) ? $a : promise.$prev()['$nil?']()))) {
          current.$push(promise.$value())};
        if ($truthy((prev = promise.$prev()))) {
          return current.$concat(self.$it(prev))
          } else {
          return current
        };
      }, TMP_Trace_it_32.$$arity = 1);
      return (Opal.defn(self, '$initialize', TMP_Trace_initialize_33 = function $$initialize(depth, block) {
        var TMP_34, self = this, $iter = TMP_Trace_initialize_33.$$p, $yield = $iter || nil;

        if ($iter) TMP_Trace_initialize_33.$$p = null;
        
        self.depth = depth;
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Trace_initialize_33, false), [$hash2(["success"], {"success": $send(self, 'proc', [], (TMP_34 = function(){var self = TMP_34.$$s || this, $a, trace = nil;

        
          trace = Opal.const_get_relative($nesting, 'Trace').$it(self).$reverse();
          trace.$pop();
          if ($truthy(($truthy($a = depth) ? $rb_le(depth, trace.$length()) : $a))) {
            trace.$shift($rb_minus(trace.$length(), depth))};
          return $send(block, 'call', Opal.to_a(trace));}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34))})], null);
      }, TMP_Trace_initialize_33.$$arity = 2), nil) && 'initialize';
    })($nesting[0], self, $nesting);
    return (function($base, $super, $parent_nesting) {
      function $When(){};
      var self = $When = $klass($base, $super, 'When', $When);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_When_initialize_35, TMP_When_each_37, TMP_When_collect_39, TMP_When_inject_41, TMP_When_wait_44, TMP_When_$gt$gt_45, TMP_When_try_47;

      def.wait = nil;
      
      
      Opal.defn(self, '$initialize', TMP_When_initialize_35 = function $$initialize(promises) {
        var TMP_36, self = this, $iter = TMP_When_initialize_35.$$p, $yield = $iter || nil;

        if (promises == null) {
          promises = [];
        }
        if ($iter) TMP_When_initialize_35.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_When_initialize_35, false), [], null);
        self.wait = [];
        return $send(promises, 'each', [], (TMP_36 = function(promise){var self = TMP_36.$$s || this;
if (promise == null) promise = nil;
        return self.$wait(promise)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36));
      }, TMP_When_initialize_35.$$arity = -1);
      
      Opal.defn(self, '$each', TMP_When_each_37 = function $$each() {
        var TMP_38, self = this, $iter = TMP_When_each_37.$$p, block = $iter || nil;

        if ($iter) TMP_When_each_37.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block given")
        };
        return $send(self, 'then', [], (TMP_38 = function(values){var self = TMP_38.$$s || this;
if (values == null) values = nil;
        return $send(values, 'each', [], block.$to_proc())}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38));
      }, TMP_When_each_37.$$arity = 0);
      
      Opal.defn(self, '$collect', TMP_When_collect_39 = function $$collect() {
        var TMP_40, self = this, $iter = TMP_When_collect_39.$$p, block = $iter || nil;

        if ($iter) TMP_When_collect_39.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block given")
        };
        return $send(self, 'then', [], (TMP_40 = function(values){var self = TMP_40.$$s || this;
if (values == null) values = nil;
        return Opal.const_get_relative($nesting, 'When').$new($send(values, 'map', [], block.$to_proc()))}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40));
      }, TMP_When_collect_39.$$arity = 0);
      
      Opal.defn(self, '$inject', TMP_When_inject_41 = function $$inject($a_rest) {
        var TMP_42, self = this, args, $iter = TMP_When_inject_41.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_When_inject_41.$$p = null;
        return $send(self, 'then', [], (TMP_42 = function(values){var self = TMP_42.$$s || this;
if (values == null) values = nil;
        return $send(values, 'reduce', Opal.to_a(args), block.$to_proc())}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42))
      }, TMP_When_inject_41.$$arity = -1);
      Opal.alias(self, "map", "collect");
      Opal.alias(self, "reduce", "inject");
      
      Opal.defn(self, '$wait', TMP_When_wait_44 = function $$wait(promise) {
        var TMP_43, self = this;

        
        if ($truthy(Opal.const_get_relative($nesting, 'Promise')['$==='](promise))) {
          } else {
          promise = Opal.const_get_relative($nesting, 'Promise').$value(promise)
        };
        if ($truthy(promise['$act?']())) {
          promise = promise.$then()};
        self.wait['$<<'](promise);
        $send(promise, 'always', [], (TMP_43 = function(){var self = TMP_43.$$s || this;
          if (self.next == null) self.next = nil;

        if ($truthy(self.next['$any?']())) {
            return self.$try()
            } else {
            return nil
          }}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43));
        return self;
      }, TMP_When_wait_44.$$arity = 1);
      Opal.alias(self, "and", "wait");
      
      Opal.defn(self, '$>>', TMP_When_$gt$gt_45 = function($a_rest) {
        var TMP_46, self = this, $iter = TMP_When_$gt$gt_45.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_When_$gt$gt_45.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        return $send($send(self, Opal.find_super_dispatcher(self, '>>', TMP_When_$gt$gt_45, false), $zuper, $iter), 'tap', [], (TMP_46 = function(){var self = TMP_46.$$s || this;

        return self.$try()}, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46))
      }, TMP_When_$gt$gt_45.$$arity = -1);
      return (Opal.defn(self, '$try', TMP_When_try_47 = function() {
        var self = this, promise = nil;

        if ($truthy($send(self.wait, 'all?', [], "realized?".$to_proc()))) {
          if ($truthy((promise = $send(self.wait, 'find', [], "rejected?".$to_proc())))) {
            return self.$reject(promise.$error())
            } else {
            return self.$resolve($send(self.wait, 'map', [], "value".$to_proc()))
          }
          } else {
          return nil
        }
      }, TMP_When_try_47.$$arity = 0), nil) && 'try';
    })($nesting[0], self, $nesting);
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery/http"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$to_n', '$each', '$define_singleton_method', '$send', '$new', '$define_method', '$attr_reader', '$delete', '$update', '$upcase', '$succeed', '$fail', '$promise', '$parse', '$private', '$tap', '$proc', '$ok?', '$resolve', '$reject', '$from_object', '$call']);
  
  self.$require("json");
  self.$require("native");
  self.$require("promise");
  self.$require("opal/jquery/constants");
  return (function($base, $super, $parent_nesting) {
    function $HTTP(){};
    var self = $HTTP = $klass($base, $super, 'HTTP', $HTTP);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HTTP_1, TMP_HTTP_setup_4, TMP_HTTP_setup$eq_5, TMP_HTTP_initialize_6, TMP_HTTP_send_7, TMP_HTTP_json_8, TMP_HTTP_ok$q_9, TMP_HTTP_get_header_10, TMP_HTTP_inspect_11, TMP_HTTP_promise_14, TMP_HTTP_succeed_15, TMP_HTTP_fail_16;

    def.settings = def.payload = def.url = def.method = def.handler = def.json = def.body = def.ok = def.xhr = def.promise = def.status_code = nil;
    
    var $ = Opal.const_get_relative($nesting, 'JQUERY_SELECTOR').$to_n();
    Opal.const_set($nesting[0], 'ACTIONS', ["get", "post", "put", "delete", "patch", "head"]);
    $send(Opal.const_get_relative($nesting, 'ACTIONS'), 'each', [], (TMP_HTTP_1 = function(action){var self = TMP_HTTP_1.$$s || this, TMP_2, TMP_3;
if (action == null) action = nil;
    
      $send(self, 'define_singleton_method', [action], (TMP_2 = function(url, options){var self = TMP_2.$$s || this, block;

        block = TMP_2.$$p || nil;
        if (block) TMP_2.$$p = null;
        if (options == null) {
          options = $hash2([], {});
        }if (url == null) url = nil;
      return self.$new().$send(action, url, options, block)}, TMP_2.$$s = self, TMP_2.$$arity = -2, TMP_2));
      return $send(self, 'define_method', [action], (TMP_3 = function(url, options){var self = TMP_3.$$s || this, block;

        block = TMP_3.$$p || nil;
        if (block) TMP_3.$$p = null;
        if (options == null) {
          options = $hash2([], {});
        }if (url == null) url = nil;
      return self.$send(action, url, options, block)}, TMP_3.$$s = self, TMP_3.$$arity = -2, TMP_3));}, TMP_HTTP_1.$$s = self, TMP_HTTP_1.$$arity = 1, TMP_HTTP_1));
    Opal.defs(self, '$setup', TMP_HTTP_setup_4 = function $$setup() {
      var self = this;

      return Opal.const_get_relative($nesting, 'Hash').$new($.ajaxSetup())
    }, TMP_HTTP_setup_4.$$arity = 0);
    Opal.defs(self, '$setup=', TMP_HTTP_setup$eq_5 = function(settings) {
      var self = this;

      return $.ajaxSetup(settings.$to_n())
    }, TMP_HTTP_setup$eq_5.$$arity = 1);
    self.$attr_reader("body", "error_message", "method", "status_code", "url", "xhr");
    
    Opal.defn(self, '$initialize', TMP_HTTP_initialize_6 = function $$initialize() {
      var self = this;

      
      self.settings = $hash2([], {});
      return (self.ok = true);
    }, TMP_HTTP_initialize_6.$$arity = 0);
    
    Opal.defn(self, '$send', TMP_HTTP_send_7 = function $$send(method, url, options, block) {
      var $a, self = this, settings = nil, payload = nil;

      
      self.method = method;
      self.url = url;
      self.payload = options.$delete("payload");
      self.handler = block;
      self.settings.$update(options);
      $a = [self.settings.$to_n(), self.payload], (settings = $a[0]), (payload = $a[1]), $a;
      
      if (typeof(payload) === 'string') {
        settings.data = payload;
      }
      else if (payload != nil) {
        settings.data = payload.$to_json();
        settings.contentType = 'application/json';
      }

      settings.url  = self.url;
      settings.type = self.method.$upcase();

      settings.success = function(data, status, xhr) {
        return self.$succeed(data, status, xhr);
      };

      settings.error = function(xhr, status, error) {
        return self.$fail(xhr, status, error);
      };

      $.ajax(settings);
    ;
      if ($truthy(self.handler)) {
        return self
        } else {
        return self.$promise()
      };
    }, TMP_HTTP_send_7.$$arity = 4);
    
    Opal.defn(self, '$json', TMP_HTTP_json_8 = function $$json() {
      var $a, self = this;

      return (self.json = ($truthy($a = self.json) ? $a : Opal.const_get_relative($nesting, 'JSON').$parse(self.body)))
    }, TMP_HTTP_json_8.$$arity = 0);
    
    Opal.defn(self, '$ok?', TMP_HTTP_ok$q_9 = function() {
      var self = this;

      return self.ok
    }, TMP_HTTP_ok$q_9.$$arity = 0);
    
    Opal.defn(self, '$get_header', TMP_HTTP_get_header_10 = function $$get_header(key) {
      var self = this;

      
      var value = self.xhr.getResponseHeader(key);
      return (value === null) ? nil : value;
    
    }, TMP_HTTP_get_header_10.$$arity = 1);
    
    Opal.defn(self, '$inspect', TMP_HTTP_inspect_11 = function $$inspect() {
      var self = this;

      return "" + "#<HTTP @url=" + (self.url) + " @method=" + (self.method) + ">"
    }, TMP_HTTP_inspect_11.$$arity = 0);
    self.$private();
    
    Opal.defn(self, '$promise', TMP_HTTP_promise_14 = function $$promise() {
      var TMP_12, self = this;

      
      if ($truthy(self.promise)) {
        return self.promise};
      return (self.promise = $send(Opal.const_get_relative($nesting, 'Promise').$new(), 'tap', [], (TMP_12 = function(promise){var self = TMP_12.$$s || this, TMP_13;
if (promise == null) promise = nil;
      return (self.handler = $send(self, 'proc', [], (TMP_13 = function(res){var self = TMP_13.$$s || this;
if (res == null) res = nil;
        if ($truthy(res['$ok?']())) {
            return promise.$resolve(res)
            } else {
            return promise.$reject(res)
          }}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13)))}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12)));
    }, TMP_HTTP_promise_14.$$arity = 0);
    
    Opal.defn(self, '$succeed', TMP_HTTP_succeed_15 = function $$succeed(data, status, xhr) {
      var self = this;

      
      
      self.body = data;
      self.xhr  = xhr;
      self.status_code = xhr.status;

      if (typeof(data) === 'object') {
        self.json = Opal.const_get_relative($nesting, 'JSON').$from_object(data);
      }
    ;
      if ($truthy(self.handler)) {
        return self.handler.$call(self)
        } else {
        return nil
      };
    }, TMP_HTTP_succeed_15.$$arity = 3);
    return (Opal.defn(self, '$fail', TMP_HTTP_fail_16 = function $$fail(xhr, status, error) {
      var self = this;

      
      
      self.body = xhr.responseText;
      self.xhr = xhr;
      self.status_code = xhr.status;
    ;
      self.ok = false;
      if ($truthy(self.handler)) {
        return self.handler.$call(self)
        } else {
        return nil
      };
    }, TMP_HTTP_fail_16.$$arity = 3), nil) && 'fail';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery/kernel"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_alert_1;

    
    Opal.defn(self, '$alert', TMP_Kernel_alert_1 = function $$alert(msg) {
      var self = this;

      
      alert(msg);
      return nil;
    }, TMP_Kernel_alert_1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    self.$require("opal/jquery/window");
    self.$require("opal/jquery/document");
    self.$require("opal/jquery/element");
    self.$require("opal/jquery/event");
    self.$require("opal/jquery/http");
    return self.$require("opal/jquery/kernel");
    } else {
    return nil
  }
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal-jquery"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("opal/jquery")
};

/* Generated by Opal 0.11.4 */
Opal.modules["text"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_accessor', '$now', '$+', '$-', '$sec', '$*', '$%', '$min', '$hour', '$quick_fire?', '$code', '$strftime', '$date_from', '$date_to', '$>=', '$include?', '$[]', '$to_f', '$hour_from', '$/', '$min_from', '$day_from', '$delta', '$date_today', '$new', '$year', '$month', '$day', '$<', '$hour_to', '$min_to', '$day_to', '$<=', '$start_of_day']);
  return (function($base, $super, $parent_nesting) {
    function $Text(){};
    var self = $Text = $klass($base, $super, 'Text', $Text);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Text_initialize_1, TMP_Text_sms_message_2, TMP_Text_dates_wonky$q_3, TMP_Text_quick_fire$q_4, TMP_Text_date_from_5, TMP_Text_date_to_6, TMP_Text_date_today_7;

    def.time = def.pin_code = nil;
    
    self.$attr_accessor("code");
    self.$attr_accessor("pin_code");
    self.$attr_accessor("hour_from");
    self.$attr_accessor("min_from");
    self.$attr_accessor("hour_to");
    self.$attr_accessor("min_to");
    self.$attr_accessor("day_from");
    self.$attr_accessor("day_to");
    
    Opal.defn(self, '$initialize', TMP_Text_initialize_1 = function $$initialize() {
      var self = this, t = nil, time_to = nil;

      
      self.code = "O";
      t = Opal.const_get_relative($nesting, 'Time').$now();
      self.time = $rb_plus($rb_minus($rb_minus(t, t.$sec()), $rb_times(t.$min()['$%'](15), 60)), $rb_times(15, 60));
      self.hour_from = self.time.$hour();
      self.min_from = self.time.$min();
      time_to = $rb_plus(self.time, $rb_times(60, 60));
      self.hour_to = time_to.$hour();
      return (self.min_to = time_to.$min());
    }, TMP_Text_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$sms_message', TMP_Text_sms_message_2 = function $$sms_message() {
      var self = this;

      if ($truthy(self['$quick_fire?']())) {
        return "" + (self.pin_code) + " " + (self.$code())
        } else {
        return "" + (self.pin_code) + " " + (self.$date_from().$strftime("%d%m%y")) + " " + (self.$date_from().$strftime("%H%M")) + " " + (self.$date_to().$strftime("%d%m%y")) + " " + (self.$date_to().$strftime("%H%M")) + " " + (self.$code())
      }
    }, TMP_Text_sms_message_2.$$arity = 0);
    
    Opal.defn(self, '$dates_wonky?', TMP_Text_dates_wonky$q_3 = function() {
      var self = this;

      return $rb_ge(self.$date_from(), self.$date_to())
    }, TMP_Text_dates_wonky$q_3.$$arity = 0);
    
    Opal.defn(self, '$quick_fire?', TMP_Text_quick_fire$q_4 = function() {
      var self = this;

      return ["On", "Of"]['$include?'](self.$code()['$[]'](0, 2))
    }, TMP_Text_quick_fire$q_4.$$arity = 0);
    
    Opal.defn(self, '$date_from', TMP_Text_date_from_5 = function $$date_from() {
      var self = this, from_hours = nil, now_hours = nil, diff_hours = nil, date = nil;

      
      from_hours = $rb_plus(self.$hour_from().$to_f(), $rb_divide(self.$min_from().$to_f(), 60));
      now_hours = $rb_plus(self.time.$hour().$to_f(), $rb_divide(self.time.$min().$to_f(), 60));
      diff_hours = $rb_minus(from_hours, now_hours);
      if ($truthy(self.$day_from())) {
        
        date = self.$date_today().$delta($hash2(["days"], {"days": self.$day_from()}));
        return Opal.const_get_relative($nesting, 'Time').$new(date.$year(), date.$month(), date.$day(), self.$hour_from(), $rb_times(self.$min_from(), 15));
      } else if ($truthy($rb_lt(diff_hours, -0.25))) {
        return $rb_plus(self.time, $rb_times(3600, $rb_plus(24, diff_hours)))
        } else {
        return $rb_plus(self.time, $rb_times(3600, diff_hours))
      };
    }, TMP_Text_date_from_5.$$arity = 0);
    
    Opal.defn(self, '$date_to', TMP_Text_date_to_6 = function $$date_to() {
      var self = this, to_hours = nil, then_hours = nil, diff_hours = nil, date = nil;

      
      to_hours = $rb_plus(self.$hour_to().$to_f(), $rb_divide(self.$min_to().$to_f(), 60));
      then_hours = $rb_plus(self.$date_from().$hour().$to_f(), $rb_divide(self.$date_from().$min().$to_f(), 60));
      diff_hours = $rb_minus(to_hours, then_hours);
      if ($truthy(self.$day_to())) {
        
        date = self.$date_today().$delta($hash2(["days"], {"days": self.$day_to()}));
        return Opal.const_get_relative($nesting, 'Time').$new(date.$year(), date.$month(), date.$day(), self.$hour_to(), $rb_times(self.$min_to(), 15));
      } else if ($truthy($rb_le(diff_hours, 0))) {
        return $rb_plus(self.$date_from(), $rb_times(3600, $rb_plus(24, diff_hours)))
        } else {
        return $rb_plus(self.$date_from(), $rb_times(3600, diff_hours))
      };
    }, TMP_Text_date_to_6.$$arity = 0);
    return (Opal.defn(self, '$date_today', TMP_Text_date_today_7 = function $$date_today() {
      var self = this;

      return Opal.const_get_relative($nesting, 'Time').$new().$start_of_day()
    }, TMP_Text_date_today_7.$$arity = 0), nil) && 'date_today';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var TMP_1, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$ready?', '$height', '$width', '$new', '$find', '$css', '$/', '$on', '$forward_url', '$text', '$element', '$sms_message', '$text=', '$-', '$hour_from', '$min_from', '$hour_to', '$min_to', '$hour_from=', '$min_from=', '$hour_to=', '$min_to=', '$>', '$length', '$value', '$pin_code=', '$code=', '$puts']);
  
  self.$require("opal-jquery");
  self.$require("text");
  Opal.const_set($nesting[0], 'ACTIVE_COLOUR', "#FFDD10");
  Opal.const_set($nesting[0], 'INACTIVE_COLOUR', "#DDD");
  return $send(Opal.const_get_relative($nesting, 'Document'), 'ready?', [], (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_forward_url_8, $writer = nil;
    if (self.height == null) self.height = nil;
    if (self.width == null) self.width = nil;
    if (self.text == null) self.text = nil;
    if (self.debug == null) self.debug = nil;

  
    self.height = Opal.const_get_relative($nesting, 'Document').$height();
    self.width = Opal.const_get_relative($nesting, 'Document').$width();
    self.text = Opal.const_get_relative($nesting, 'Text').$new();
    self.debug = Opal.const_get_relative($nesting, 'Element').$find("#debug_info");
    Opal.const_get_relative($nesting, 'Element').$find("tr").$css("height", $rb_divide(self.height, 16));
    Opal.const_get_relative($nesting, 'Element').$find("body").$css("font-size", "" + ($rb_divide(self.width, 25)) + "px");
    $send(Opal.const_get_relative($nesting, 'Element').$find(".quick"), 'on', ["click"], (TMP_2 = function(event){var self = TMP_2.$$s || this, $writer = nil;
      if (self.text == null) self.text = nil;
      if (self.debug == null) self.debug = nil;
if (event == null) event = nil;
    
      self.$forward_url(event.$element().$text());
      
      $writer = [self.text.$sms_message()];
      $send(self.debug, 'text=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
    Opal.const_get_relative($nesting, 'Element').$find("" + "#fh" + (self.text.$hour_from())).$css("background-color", Opal.const_get_relative($nesting, 'ACTIVE_COLOUR'));
    Opal.const_get_relative($nesting, 'Element').$find("" + "#fm" + (self.text.$min_from())).$css("background-color", Opal.const_get_relative($nesting, 'ACTIVE_COLOUR'));
    Opal.const_get_relative($nesting, 'Element').$find("" + "#th" + (self.text.$hour_to())).$css("background-color", Opal.const_get_relative($nesting, 'ACTIVE_COLOUR'));
    Opal.const_get_relative($nesting, 'Element').$find("" + "#tm" + (self.text.$min_to())).$css("background-color", Opal.const_get_relative($nesting, 'ACTIVE_COLOUR'));
    $send(Opal.const_get_relative($nesting, 'Element').$find(".fh"), 'on', ["click"], (TMP_3 = function(event){var self = TMP_3.$$s || this, $writer = nil;
      if (self.text == null) self.text = nil;
      if (self.debug == null) self.debug = nil;
if (event == null) event = nil;
    
      event.$element().$css("background-color", Opal.const_get_relative($nesting, 'ACTIVE_COLOUR'));
      Opal.const_get_relative($nesting, 'Element').$find("" + "#fh" + (self.text.$hour_from())).$css("background-color", Opal.const_get_relative($nesting, 'INACTIVE_COLOUR'));
      
      $writer = [event.$element().$text()];
      $send(self.text, 'hour_from=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [self.text.$sms_message()];
      $send(self.debug, 'text=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
    $send(Opal.const_get_relative($nesting, 'Element').$find(".fm"), 'on', ["click"], (TMP_4 = function(event){var self = TMP_4.$$s || this, $writer = nil;
      if (self.text == null) self.text = nil;
      if (self.debug == null) self.debug = nil;
if (event == null) event = nil;
    
      event.$element().$css("background-color", Opal.const_get_relative($nesting, 'ACTIVE_COLOUR'));
      Opal.const_get_relative($nesting, 'Element').$find("" + "#fm" + (self.text.$min_from())).$css("background-color", Opal.const_get_relative($nesting, 'INACTIVE_COLOUR'));
      
      $writer = [event.$element().$text()];
      $send(self.text, 'min_from=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [self.text.$sms_message()];
      $send(self.debug, 'text=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
    $send(Opal.const_get_relative($nesting, 'Element').$find(".th"), 'on', ["click"], (TMP_5 = function(event){var self = TMP_5.$$s || this, $writer = nil;
      if (self.text == null) self.text = nil;
      if (self.debug == null) self.debug = nil;
if (event == null) event = nil;
    
      event.$element().$css("background-color", Opal.const_get_relative($nesting, 'ACTIVE_COLOUR'));
      Opal.const_get_relative($nesting, 'Element').$find("" + "#th" + (self.text.$hour_to())).$css("background-color", Opal.const_get_relative($nesting, 'INACTIVE_COLOUR'));
      
      $writer = [event.$element().$text()];
      $send(self.text, 'hour_to=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [self.text.$sms_message()];
      $send(self.debug, 'text=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
    $send(Opal.const_get_relative($nesting, 'Element').$find(".tm"), 'on', ["click"], (TMP_6 = function(event){var self = TMP_6.$$s || this, $writer = nil;
      if (self.text == null) self.text = nil;
      if (self.debug == null) self.debug = nil;
if (event == null) event = nil;
    
      event.$element().$css("background-color", Opal.const_get_relative($nesting, 'ACTIVE_COLOUR'));
      Opal.const_get_relative($nesting, 'Element').$find("" + "#tm" + (self.text.$min_to())).$css("background-color", Opal.const_get_relative($nesting, 'INACTIVE_COLOUR'));
      
      $writer = [event.$element().$text()];
      $send(self.text, 'min_to=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [self.text.$sms_message()];
      $send(self.debug, 'text=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
    $send(Opal.const_get_relative($nesting, 'Element').$find(".book"), 'on', ["click"], (TMP_7 = function(event){var self = TMP_7.$$s || this;
if (event == null) event = nil;
    return self.$forward_url(event.$element().$text())}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
    
    $writer = [self.text.$sms_message()];
    $send(self.debug, 'text=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    return (Opal.def(self, '$forward_url', TMP_forward_url_8 = function $$forward_url(code) {
      var self = this, tel = nil, $writer = nil, url = nil;
      if (self.text == null) self.text = nil;

      
      if ($truthy($rb_gt(Opal.const_get_relative($nesting, 'Element').$find("#tel").$value().$length(), 0))) {
        tel = Opal.const_get_relative($nesting, 'Element').$find("#tel").$value()
        } else {
        tel = "07860055401"
      };
      
      $writer = [Opal.const_get_relative($nesting, 'Element').$find("#pin").$value()];
      $send(self.text, 'pin_code=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [code];
      $send(self.text, 'code=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      url = "" + "sms:" + (tel) + "?body=" + (self.text.$sms_message());
      self.$puts(url);
      return window.location = encodeURI(url);
    }, TMP_forward_url_8.$$arity = 1), nil) && 'forward_url';}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1));
})(Opal);
